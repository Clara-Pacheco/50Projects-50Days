@import url('https://fonts.googleapis.com/css2?family=Mulish&display=swap'); 


* {
  box-sizing: border-box;

}


body {
  background-color: steelblue;
  color: #fff;
  font-family: 'Mulish', sans-serif;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  overflow: hidden;
  margin: 0;
}

.container {
  background-color: rgba(0, 0, 0, 0.4);
  padding: 20px 40px;
  border-radius: 5%; 
}

.container h1 {
  text-align: center;
  margin-bottom: 30px;
}

.container a {
  text-decoration: none;
  color: lightblue;
}

.btn {
  cursor: pointer;
  display: inline-block;
  width: 100%;
  background: lightblue;
  padding: 15px;
  font-family: inherit;
  font-size: 16px;
  border: 0;
  border-radius: 5px;
}

.btn:focus {
  outline: 0;
}

.btn:active {
  transform: scale(0.98);
}

.text {
  margin-top: 30px;
}

.form-control {
  position: relative;
  margin: 20px 0 40px;
  /* 20px = top, 0 left/right, 40px = bottom*/
  width: 300px;

}

.form-control input {
  background-color: transparent;
  border: 0;
  border-bottom: 2px #fff solid;
  display: block;
  width: 100%;
  padding: 15px 0;
  font-size: 18px;
  color: #fff;
}

.form-control input:focus,
.form-control input:valid {
  outline: 0;
  border-bottom-color: lightblue;
}

.form-control label {
  position: absolute;
  top: 15px;
  left: 0;

}

/* Now that we have the tags spans, add via js, we can apply
styles to it. */

.form-control label span{
  display: inline-block;
  font-size: 18px;
  min-width: 5px;
  transition: 0.3s cubic-bezier(0.68,-0.55,0.265,1.55);

}

/*Cubic BCA defines a curve and we can use it as a transition effect with a variable speed from
start to end and it takes in four points which are P zero, p one, p two, p three, p zero and p three
are the start and the end of the curve.
So I mean, you can get a lot more complicated if you're doing like really cool animations, but this
is pretty simple.*/

.form-control input:focus + label span,
.form-control input:valid + label span {
  color: lightblue;
  transform: translateY(-30px);
}


/*input:focus meaning, when we click inside.
*/

/* When the input is focused, meaning, when we click inside,
we want the direct label span*/